1:HL["/_next/static/css/26e5e103248c0511.css",{"as":"style"}]
0:["VgSiJWbqQIgn_782zEiZV",[[["",{"children":["posts",{"children":[["id","ffmpeg","d"],{"children":["__PAGE__?{\"id\":\"ffmpeg\"}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/26e5e103248c0511.css","precedence":"next"}]],"$L3"]]]]
4:HL["/_next/static/css/6d53850f6c430e2d.css",{"as":"style"}]
5:I{"id":6816,"chunks":["726:static/chunks/7ce12eaa-8a54fcd3612adceb.js","754:static/chunks/754-c0b36751a47f8874.js","185:static/chunks/app/layout-7c745b0e38c60836.js"],"name":"","async":false}
6:I{"id":6339,"chunks":["726:static/chunks/7ce12eaa-8a54fcd3612adceb.js","754:static/chunks/754-c0b36751a47f8874.js","185:static/chunks/app/layout-7c745b0e38c60836.js"],"name":"","async":false}
7:I{"id":5612,"chunks":["272:static/chunks/webpack-f55cc60471d503cd.js","227:static/chunks/20e9c529-71751042407fa032.js","340:static/chunks/340-17ce4e6ebfbad5f2.js"],"name":"default","async":false}
8:I{"id":5120,"chunks":["272:static/chunks/webpack-f55cc60471d503cd.js","227:static/chunks/20e9c529-71751042407fa032.js","340:static/chunks/340-17ce4e6ebfbad5f2.js"],"name":"default","async":false}
9:I{"id":7335,"chunks":["335:static/chunks/335-9cb190579fdc0b86.js","722:static/chunks/app/posts/[id]/page-0bd7dfca260ba2e6.js"],"name":"Image","async":false}
b:I{"id":6608,"chunks":["726:static/chunks/7ce12eaa-8a54fcd3612adceb.js","754:static/chunks/754-c0b36751a47f8874.js","185:static/chunks/app/layout-7c745b0e38c60836.js"],"name":"","async":false}
a:T3ab7,<ul>
<li><a href="#ffmpeg%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97">FFmpeg安装使用指南</a>
<ul>
<li><a href="#1%E5%AE%89%E8%A3%85">1.安装</a>
<ul>
<li><a href="#11-windows%E4%B8%8B%E5%AE%89%E8%A3%85ffmpeg">1.1 Windows下安装FFmpeg</a></li>
</ul>
</li>
<li><a href="#2%E4%BD%BF%E7%94%A8">2.使用</a>
<ul>
<li><a href="#21-%E8%AF%86%E5%88%AB%E8%A7%86%E9%A2%91%E4%BF%A1%E6%81%AF%E9%80%9A%E8%BF%87ffprobe%E5%91%BD%E4%BB%A4%E8%AF%86%E5%88%AB%E5%B9%B6%E8%BE%93%E5%87%BA%E8%A7%86%E9%A2%91%E4%BF%A1%E6%81%AF">2.1 识别视频信息,通过ffprobe命令识别并输出视频信息</a></li>
<li><a href="#22-%E8%A7%86%E9%A2%91%E5%8E%8B%E7%BC%A9">2.2 视频压缩</a></li>
<li><a href="#ffmpeg%E6%B7%BB%E5%8A%A0%E5%AD%97%E5%B9%95%E6%96%87%E4%BB%B6">ffmpeg添加字幕文件</a></li>
</ul>
</li>
<li><a href="#1-%E5%AD%97%E5%B9%95%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2">1 字幕格式转换</a></li>
</ul>
</li>
</ul>
<h1 id="ffmpeg安装使用指南"><a class="anchor" href="#ffmpeg安装使用指南"><span class="icon icon-link"></span></a>FFmpeg安装使用指南</h1>
<h2 id="1安装"><a class="anchor" href="#1安装"><span class="icon icon-link"></span></a>1.安装</h2>
<h3 id="11-windows下安装ffmpeg"><a class="anchor" href="#11-windows下安装ffmpeg"><span class="icon icon-link"></span></a>1.1 Windows下安装FFmpeg</h3>
<blockquote>
<p>访问<a href="https://ffmpeg.org/">FFmpeg</a>guan官网下载，完成安装</p>
</blockquote>
<hr>
<h2 id="2使用"><a class="anchor" href="#2使用"><span class="icon icon-link"></span></a>2.使用</h2>
<h3 id="21-识别视频信息通过ffprobe命令识别并输出视频信息"><a class="anchor" href="#21-识别视频信息通过ffprobe命令识别并输出视频信息"><span class="icon icon-link"></span></a>2.1 识别视频信息,通过ffprobe命令识别并输出视频信息</h3>
<div data-rehype-pretty-code-fragment=""><pre style="background-color: #282c34" tabindex="0" data-language="console" data-theme="default"><code class="code-highlight"><span class="code-line line-number" line="1"><span data-line=""><span style="color: #61AFEF">$</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">ffprobe</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-v</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">error</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-show_streams</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-print_format</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">json</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'xxx.mp4'</span></span></span></code></pre></div>
<h3 id="22-视频压缩"><a class="anchor" href="#22-视频压缩"><span class="icon icon-link"></span></a>2.2 视频压缩</h3>
<div data-rehype-pretty-code-fragment=""><pre style="background-color: #282c34" tabindex="0" data-language="console" data-theme="default"><code class="code-highlight"><span class="code-line line-number" line="1"><span data-line=""><span style="color: #61AFEF">$</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">ffmpeg</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-i</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'xxx.mp4'</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-s</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1920</span><span style="color: #98C379">x1080</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-b:v</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">8500</span><span style="color: #98C379">k</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'out.mp4'</span></span></span></code></pre></div>
<blockquote>
<p>注意：</p>
</blockquote>
<blockquote>
<blockquote>
<p>我们主要关注的部分: -s (输出视频分辨率，尺寸) ； -b（输出视频的清晰度）</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>-i ：后面跟着一个xxx.mp4，是我们即将要压缩的源视频文件当然也可以用绝对路径或者相对路径。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>-s ：后面写的是1920x1080，对应的是我们目标视频文件分辨率，注意中间的是字母 x（艾克斯），不是乘号（✖）。一般分辨率可以按照自己想法设置。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>-b:v : 码率，数据传输时单位时间传送的数据位数，这个参数影响着视频的清晰度，我这里使用的分辨率是1920x1080，码率设置为 8500k，具体大小主要根据所选视频的分辨率自行选择, 参考这位大佬的分辨率与码率的对照表 ，然后可以根据自己的需要调整自己的码率大小 。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>有一些没有用到的参数：</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>-r : 视频每秒的帧数，虽然说减少每秒视频的帧数也可以起到压缩视频的大小，但我不用他的原因是因为在一些切换画面比较快速和频繁的情况下，减少帧数会导致视频卡顿的视觉感受，一般我不会少于25帧/s。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>-qscale: 质量为基础的VBR，网上说取值0.01-255。（但好像导出默认就是VBR，我试着调节了一下参数，对文件大小影响并不是很大，所以也没有去选择这一个，还是用的 -b:v 这个参数）</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>-sameq 使用和源同样的质量（没试过，用不到）</p>
</blockquote>
</blockquote>
<blockquote>
<p>示例：1920x1080 25帧/s的视频压缩，使用的命令：</p>
</blockquote>
<div data-rehype-pretty-code-fragment=""><pre style="background-color: #282c34" tabindex="0" data-language="console" data-theme="default"><code class="code-highlight"><span class="code-line line-number" line="1"><span data-line=""><span style="color: #61AFEF">$</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">ffmpeg</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-i</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'xxx.mp4'</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-r</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">25</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-s</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1920</span><span style="color: #98C379">x1080</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-b:v</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">8500</span><span style="color: #98C379">k</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'x.mp4'</span></span></span></code></pre></div>
<h3 id="ffmpeg添加字幕文件"><a class="anchor" href="#ffmpeg添加字幕文件"><span class="icon icon-link"></span></a>ffmpeg添加字幕文件</h3>
<h2 id="1-字幕格式转换"><a class="anchor" href="#1-字幕格式转换"><span class="icon icon-link"></span></a>1 字幕格式转换</h2>
<div data-rehype-pretty-code-fragment=""><pre style="background-color: #282c34" tabindex="0" data-language="console" data-theme="default"><code class="code-highlight"><span class="code-line line-number" line="1"><span data-line=""><span style="color: #61AFEF">ffmpeg</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-i</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"test_x.srt"</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"test_x.vtt"</span></span>
</span><span class="code-line line-number" line="2"><span data-line=""><span style="color: #61AFEF">ffmpeg</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-i</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"test_x.srt' 'test_x.ass"</span></span></span></code></pre></div>
<p>3.1. 查询命令
查询所下载的ffmpeg是否支持cuda，若是不支持（我下载的是支持的），那从新下载一下或者自行编译。bash</p>
<p>ffmpeg -hwaccels</p>
<p>查看支持 cuda 的编码器
执行 ffmpeg -codecs | findstr cuvid or ffmpeg -codecs | grep cuvid(linux)
所有带有"cuvid"或"nvenc"的，都是CUDA提供的GPU编解码器</p>
<p>开始转码
执行ffmpeg -i  -vcodec h264_nvenc 
-vcodec 表示指定 视频编码器，只要指定了支持 GPU 加速的编码器，FFMPEG 就会自动使用 GPU</p>
<p>使用GPU进行视频转码
用GPU进行转码的命令和软转码命令不太一样，CPU转码的时候，我们可以依赖ffmpeg识别输入视频的编码格式并选择对应的解码器，但ffmpeg只会自动选择CPU解码器，要让ffmpeg使用GPU解码器，必须先用ffprobe识别出输入视频的编码格式，然后在命令行中指定对应的GPU解码器。</p>
<p>例如，将h264编码的源视频转码为指定尺寸和码率的h264编码视频：</p>
<p>ffmpeg -hwaccel cuvid -c:v h264_cuvid -i  -c:v h264_nvenc -b:v 2048k -vf scale_npp=1280:-1 -y 
-hwaccel cuvid：指定使用cuvid硬件加速
-c:v h264_cuvid：使用h264_cuvid进行视频解码
-c:v h264_nvenc：使用h264_nvenc进行视频编码
-vf scale_npp=1280:-1：指定输出视频的宽高，注意，这里和软解码时使用的-vf scale=x:x不一样
转码期间使用nvidia-smi查看显卡状态，能够看到ffmpeg确实是在使用GPU进行转码：
作者：kelgon
链接：<a href="https://www.jianshu.com/p/59da3d350488">https://www.jianshu.com/p/59da3d350488</a></p>
<p>ffmpeg并不具备自动向不同GPU分配转码任务的能力，但经过一番调查后，发现可以通过-hwaccel_device参数指定转码任务使用的GPU！</p>
<p>向不同GPU提交转码任务
ffmpeg -hwaccel cuvid -hwaccel_device 0 -c:v h264_cuvid -i  -c:v h264_nvenc -b:v 2048k -vf scale_npp=1280:-1 -y 
ffmpeg -hwaccel cuvid -hwaccel_device 1 -c:v h264_cuvid -i  -c:v h264_nvenc -b:v 2048k -vf scale_npp=1280:-1 -y 
-hwaccel_device N：指定某颗GPU执行转码任务，N为数字</p>
<h1 id="ffmpeg添加字幕文件-1"><a class="anchor" href="#ffmpeg添加字幕文件-1"><span class="icon icon-link"></span></a>ffmpeg添加字幕文件</h1>
<h2 id="1-字幕格式转换-1"><a class="anchor" href="#1-字幕格式转换-1"><span class="icon icon-link"></span></a>1 字幕格式转换</h2>
<div data-rehype-pretty-code-fragment=""><pre style="background-color: #282c34" tabindex="0" data-language="console" data-theme="default"><code class="code-highlight"><span class="code-line line-number" line="1"><span data-line=""><span style="color: #61AFEF">ffmpeg</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-i</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"test_x.srt"</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"test_x.vtt"</span></span>
</span><span class="code-line line-number" line="2"><span data-line=""><span style="color: #61AFEF">ffmpeg</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-i</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"test_x.srt' 'test_x.ass"</span></span></span></code></pre></div>
<h2 id="2-添加软字幕"><a class="anchor" href="#2-添加软字幕"><span class="icon icon-link"></span></a>2 添加软字幕</h2>
<h3 id="21-添加软字幕"><a class="anchor" href="#21-添加软字幕"><span class="icon icon-link"></span></a>2.1 添加软字幕</h3>
<div data-rehype-pretty-code-fragment=""><pre style="background-color: #282c34" tabindex="0" data-language="console" data-theme="default"><code class="code-highlight"><span class="code-line line-number" line="1"><span data-line=""><span style="color: #61AFEF">ffmpeg</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-i</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'xxx.mkv'</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-vf</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">subtitles='xxx.srt'</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-c</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">copy</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">output.mkv</span></span></span></code></pre></div>
<blockquote>
<p>tips：软字幕只有部分容器格式比如(mkv)才支持，MP4/MOV等不支持，而且也只有部分播放器支持软字>幕或者外挂字幕(如VLC播放器)</p>
</blockquote>
<h3 id="22-添加硬字幕"><a class="anchor" href="#22-添加硬字幕"><span class="icon icon-link"></span></a>2.2 添加硬字幕</h3>
<div data-rehype-pretty-code-fragment=""><pre style="background-color: #282c34" tabindex="0" data-language="console" data-theme="default"><code class="code-highlight"><span class="code-line line-number" line="1"><span data-line=""><span style="color: #61AFEF">ffmpeg</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-i</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'xx.mp4'</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-vf</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">subtitles='xx.srt'</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">output.mp4</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">//有解码过程</span></span></span></code></pre></div>
<p>添加字幕
理论上这样就ok了，可以加src lrc ass等字幕文件</p>
<p>但是，实际运用当中，下面这种就会报错</p>
<p>ffmpeg -i input.mp4 -vf subtitles= D:/字幕文件/subtitle.srt output.mp4
因为路径中出现了盘符 即D:这种，所以正确(能用)的写法应该是下面这样</p>
<p>ffmpeg -i input.mp4 -vf subtitles= /字幕文件/subtitle.srt output.mp4
但这种写法也只是勉强能用 需要字幕文件在同一硬盘中</p>
<p>所以最终方案如下</p>
<p>ffmpeg  -i  D:\项目\视频处理\mix\拼接\侧脸-于果.mp4 -i F:\音乐mv\歌曲\侧脸-于果.mp3 -vf subtitles='F:/音乐mv/歌曲/侧脸-于果.lrc' -y D:\项目\视频处理\mix\成品\侧脸-于果.mp4
可以看到视频路径 音频路径都是正常的路径 但是字幕路径需要是正斜杠/,而且必须用单引号引起来，而且要用反斜杠转义\</p>
<p>这个命令在cmd下就可以正常跑了，但在其他语音环境下，如python 需要再加一层反斜杠，即</p>
<p>cmdLine="ffmpeg  -i  D:\项目\视频处理\mix\拼接\侧脸-于果.mp4 -i F:\音乐mv\歌曲\侧脸-于果.mp3 -vf subtitles=\'F:/音乐mv/歌曲/侧脸-于果.lrc\' -y D:\项目\视频处理\mix/成品/侧脸-于果.mp4"
subprocess.call(cmdLine, shell=True)</p>c:T481,M12 3C7.0275 3 3 7.12937 3 12.2276C3 16.3109 5.57625 19.7597 9.15374 20.9824C9.60374 21.0631 9.77249 20.7863 9.77249 20.5441C9.77249 20.3249 9.76125 19.5982 9.76125 18.8254C7.5 19.2522 6.915 18.2602 6.735 17.7412C6.63375 17.4759 6.19499 16.6569 5.8125 16.4378C5.4975 16.2647 5.0475 15.838 5.80124 15.8264C6.51 15.8149 7.01625 16.4954 7.18499 16.7723C7.99499 18.1679 9.28875 17.7758 9.80625 17.5335C9.885 16.9337 10.1212 16.53 10.38 16.2993C8.3775 16.0687 6.285 15.2728 6.285 11.7432C6.285 10.7397 6.63375 9.9092 7.20749 9.26326C7.1175 9.03257 6.8025 8.08674 7.2975 6.81794C7.2975 6.81794 8.05125 6.57571 9.77249 7.76377C10.4925 7.55615 11.2575 7.45234 12.0225 7.45234C12.7875 7.45234 13.5525 7.55615 14.2725 7.76377C15.9937 6.56418 16.7475 6.81794 16.7475 6.81794C17.2424 8.08674 16.9275 9.03257 16.8375 9.26326C17.4113 9.9092 17.76 10.7281 17.76 11.7432C17.76 15.2843 15.6563 16.0687 13.6537 16.2993C13.98 16.5877 14.2613 17.1414 14.2613 18.0065C14.2613 19.2407 14.25 20.2326 14.25 20.5441C14.25 20.7863 14.4188 21.0746 14.8688 20.9824C16.6554 20.364 18.2079 19.1866 19.3078 17.6162C20.4077 16.0457 20.9995 14.1611 21 12.2276C21 7.12937 16.9725 3 12 3Z2:[["$","html",null,{"lang":"zh-CN","className":"flex flex-col h-full __className_a4da66","children":["$","body",null,{"suppressHydrationWarning":true,"className":"flex flex-col h-full px-2","children":["$","$L5",null,{"children":[["$","$L6",null,{}],["$","main",null,{"className":"text-black dark:text-white mx-0 px-2 py-0 flex-1 leading-6 justify-center","children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children",["id","ffmpeg","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":[["$","div",null,{"className":"container mx-auto w-3/6","children":["$","article",null,{"className":"flex flex-col items-start justify-center w-full","children":[["$","h1",null,{"className":"font-extrabold text-2xl tracking-tight mb-0","children":"ffmpeg"}],["$","div",null,{"className":"flex items-start justify-between w-full md:flex-row my-8","children":[["$","div",null,{"className":"flex items-center","children":[["$","$L9",null,{"alt":"Ling Yu","height":36,"width":36,"sizes":"20vw","src":"/images/favicon.ico","className":"rounded-full mt-0 mb-0","priority":true}],["$","div",null,{"className":"ml-2 text-sm text-gray-600 dark:text-gray-400","children":[["$","span",null,{"className":"flex text-black dark:text-gray-200 font-bold","children":"Ling Yu"}],["$","div",null,{"children":["Posted on ","May 10, 2023"]}]]}]]}],["$","div",null,{"className":"flex flex-col text-sm text-gray-600 dark:text-gray-400 min-w-32 md:mt-0","children":["$","div",null,{"children":["8 min read"," (",317," words)"]}]}]]}],["$","div",null,{"className":"w-full prose dark:prose-invert max-w-none mb-8","children":["$","section",null,{"dangerouslySetInnerHTML":{"__html":"$a"}}]}]]}]}],null],"segment":"__PAGE__?{\"id\":\"ffmpeg\"}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/6d53850f6c430e2d.css","precedence":"next"}]]}],"segment":["id","ffmpeg","d"]},"styles":[]}],"segment":"posts"},"styles":[]}]}],["$","footer",null,{"className":"flex justify-between max-w-3xl container mx-auto p-2 text-gray-400 tracking-tight m-2","children":[["$","p",null,{"className":"py-2 text-gray-600 dark:text-gray-400","children":["© 2023 ",["$","$Lb",null,{"className":"hover:underline hover:text-black dark:hover:text-white underline-offset-[3px]","href":"https://github.com/shaijing","target":"_blank","children":"Ling Yu"}],". All rights reserved."]}],["$","ul",null,{"className":"flex items-center py-2","children":["$","li",null,{"children":["$","$Lb",null,{"className":"flex hover:text-black dark:hover:text-white","href":"https://github.com/shaijing","target":"_blank","children":["$","svg",null,{"width":"24","height":"24","fill":"currentColor","viewBox":"3 3 18 18","children":[["$","title",null,{"children":"GitHub"}],["$","path",null,{"d":"$c"}]]}]}]}]}]]}]]}]}]}],null]
3:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"ffmpeg | Ling's Blog"}],["$","meta","2",{"name":"description","content":"Generated by Ling"}],["$","meta","3",{"name":"author","content":"Ling Yu"}],["$","link","4",{"rel":"author","href":"https://nextjs.org"}],["$","meta","5",{"name":"author","content":"NextJs"}],["$","meta","6",{"name":"generator","content":"Next.js"}],["$","meta","7",{"name":"keywords","content":"Blog,AI,ML"}],["$","meta","8",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","9",{"property":"og:title","content":"Ling's Blog"}],["$","meta","10",{"property":"og:description","content":"Developer and Writer."}],["$","meta","11",{"property":"og:url","content":"https://shaijing.github.io"}],["$","meta","12",{"property":"og:site_name","content":"https://shaijing.github.io"}],["$","meta","13",{"property":"og:locale","content":"zh-CN"}],["$","meta","14",{"property":"og:type","content":"website"}],["$","meta","15",{"name":"twitter:card","content":"summary"}],["$","meta","16",{"name":"twitter:title","content":"Ling's Blog"}],["$","meta","17",{"name":"twitter:description","content":"Developer and Writer."}],["$","link","18",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]]
